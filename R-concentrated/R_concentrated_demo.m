%pass filter bank into uniqueness set
%three different checks if eigenvalues are there

%filters
%In a cell, for each filter, vertices, positions, coefficients
%easier to do interpolation this way

%show that the atoms are orthogonal to eahc other in different bands

close all;
clear all;
rand('seed',1);
randn('seed',1);

compute_full_eigen=0;

% graph
G = gsp_david_sensor_network(500);
G = gsp_estimate_lmax(G);
if compute_full_eigen
    G = gsp_compute_fourier_basis(G);
end

%% filter describing band
up_limit=2.55;
low_limit=1.55;
range=[0,G.lmax];
order = 500;

h = @(x) (x>=low_limit & x<up_limit);
[CH, JCH]=gsp_jackson_cheby_coeff(low_limit, up_limit, range, order);

xx=range(1):.0001:range(2);
f=gsp_cheby_eval(xx,JCH,range);

figure;
hold on;
%gsp_plot_filter(G,h);
plot(xx, h(xx),'k');
plot(xx,f,'g');
title('Spectral Band');

%% signal generated by filtering random noise
r = rand(G.N,1);
y = gsp_filter(G,h,r); 
max_val=max(abs(y));
param.vertex_size = 100;
param.climits = [-max_val,max_val];
figure;
gsp_plot_signal(G, y, param);
title('Original R-Concentrated Signal');

% sampling and reconstruction parameters
L = ceil(2*log(G.N));

if compute_full_eigen
    %extra_samps=0
    nb_meas = sum(h(G.e)); %+extra_samps; % m: num eigenvalues in band, will need to estimate if don't have exact eigenvalues
else
    G=gsp_spectrum_cdf_approx(G);
    nb_meas=floor((G.spectrum_cdf_approx(up_limit)-G.spectrum_cdf_approx(low_limit))*G.N);
end

%% Sampling Distribution
[weights, P_min_half] = compute_sampling_weights(G,L,h);

figure;
param.climits = [0,max(weights)];
gsp_plot_signal(G, weights, param);
title('Sampling Weights');

% plot coherence vector
%co=(max(abs(G.U)'))';
%figure;
%gsp_plot_signal(G, co, param);

%% Sampling Matrix
[M, selected] = build_sampling_matrix(G, weights, nb_meas);

% plot selected vertices
selected_signal=zeros(G.N,1);
selected_signal(selected)=1;

param.climits = [0,1];
figure;
gsp_plot_signal(G, selected_signal, param);
title('Selected Vertices');

%% Reconstruct
gamma = 100; % regularization parameter
z = approx_reconstruct(G, y, weights, selected, gamma , h, JCH);

% plot reconstruction
figure;
param.climits = [-max_val,max_val];
gsp_plot_signal(G, z, param);
title('Reconstruction');

% plot reconstruction error
error=abs(y-z);
param.climits = [0, max(error)];
figure;
gsp_plot_signal(G, error, param);
title('Reconstruction Error');
